// main.wren
import "some/tester" for Tester
import "lib/io/stream" for Stream
import "lib/io/file" for File
import "lib/sdl" for Sdl, Window


System.print("This is main.wren")

class Main {
    construct new() {}
    main() { 
	    System.print("Hello world")
        var file = Stream.Create("wren/some/path.txt") 
        file.Write("some text") 
        file.Close()

        var other = Stream.Create("wren/some/other.txt")
        var t = other.Read()
        other.Close()
        System.print("======================================\n")
        System.print(t)
        System.print("======================================\n")

        this.Test1()
        this.Test2()
        this.Test3()
        this.Test4()

        // Sdl.Init(Sdl.INIT_VIDEO) // | Sdl.INIT_EVENTS | Sdl.INIT_TIMER | Sdl.INIT_AUDIO)
        // var window = Window.Create("SDL Demo", Window.WINDOWPOS_CENTERED, Window.WINDOWPOS_CENTERED,
        //                                 640, 480, Window.WINDOW_SHOWN)
        // // var window = Window.Create("SDL Demo", -1, -1, 640, 480, Window.WINDOW_SHOWN)

        // if (window == null) {
        //     System.print("Could not be opened")
        // } else {
        //     Sdl.Delay(3000)
        // }
        // window.Close()
        // Sdl.Quit()
        
    }

    Test1() {
        var fiber = Fiber.new { 
            System.print("It's alive!") 
        }

        System.print(fiber.isDone) // false
        fiber.call() // It's alive!
        System.print(fiber.isDone) // true

    }
    Test2() {
        var fiber = Fiber.new { 
            System.print("Before yield") 
            Fiber.yield() 
            System.print("Resumed") 
        }

        System.print("Before call") //Before call
        fiber.call() //Before yield
        System.print("Calling again") //Calling again
        fiber.call() //Resumed
        System.print("All done") //All Done

    }
    Test3() {
        var fiber = Fiber.new {|param| 
            System.print(param) 
            var result = Fiber.yield() 
            System.print(result) 
        }

        fiber.call("First") //First
        fiber.call("Second") //Second
    }
    Test4() {
        var fiber = Fiber.new { 
            (1..10).each {|i| 
                Fiber.yield(i) 
            } 
        }
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
        System.print(fiber.call())
    }
}
// tester.wren
import "lib/io/stream" for Stream
import "lib/io/file" for File

System.print("This is tester.wren")

class Tester {
    construct new() {}
    tester() {
    	System.print("Hello tester")
    }
}
some textsome other text
foreign class Sdl { 

    static INIT_TIMER          { 0x00000001 }
    static INIT_AUDIO          { 0x00000010 }
    static INIT_VIDEO          { 0x00000020 }  /**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
    static INIT_JOYSTICK       { 0x00000200 }  /**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
    static INIT_HAPTIC         { 0x00001000 }
    static INIT_GAMECONTROLLER { 0x00002000 }  /**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
    static INIT_EVENTS         { 0x00004000 }
    static INIT_SENSOR         { 0x00008000 }

    foreign static Init(flags) 
    foreign static Delay(ms)
    foreign static Quit()
}

foreign class Window { 

    static WINDOWPOS_UNDEFINED { 0x1FFF0000 }
    static WINDOWPOS_CENTERED { 0x2FFF0000 }
    static WINDOW_FULLSCREEN { 0x00000001 }         /**< fullscreen window */
    static WINDOW_OPENGL { 0x00000002 }             /**< window usable with OpenGL context */
    static WINDOW_SHOWN { 0x00000004 }              /**< window is visible */
    static WINDOW_HIDDEN { 0x00000008 }             /**< window is not visible */
    static WINDOW_BORDERLESS { 0x00000010 }         /**< no window decoration */
    static WINDOW_RESIZABLE { 0x00000020 }          /**< window can be resized */
    static WINDOW_MINIMIZED { 0x00000040 }          /**< window is minimized */
    static WINDOW_MAXIMIZED { 0x00000080 }          /**< window is maximized */
    static WINDOW_INPUT_GRABBED { 0x00000100 }      /**< window has grabbed input focus */
    static WINDOW_INPUT_FOCUS { 0x00000200 }        /**< window has input focus */
    static WINDOW_MOUSE_FOCUS { 0x00000400 }        /**< window has mouse focus */
    static WINDOW_FULLSCREEN_DESKTOP  { 0x00000001 | 0x00001000 }
    static WINDOW_FOREIGN { 0x00000800 }            /**< window not created by SDL */
    static WINDOW_ALLOW_HIGHDPI { 0x00002000 }      /**< window should be created in high-DPI mode if supported.
    //                                                  On macOS NSHighResolutionCapable must be set true in the
    //                                                  application's Info.plist for this to have any effect. */
    static WINDOW_MOUSE_CAPTURE { 0x00004000 }      /**< window has mouse captured (unrelated to INPUT_GRABBED) */
    static WINDOW_ALWAYS_ON_TOP { 0x00008000 }      /**< window should always be above others */
    static WINDOW_SKIP_TASKBAR  { 0x00010000 }      /**< window should not be added to the taskbar */
    static WINDOW_UTILITY       { 0x00020000 }      /**< window should be treated as a utility window */
    static WINDOW_TOOLTIP       { 0x00040000 }      /**< window should be treated as a tooltip */
    static WINDOW_POPUP_MENU    { 0x00080000 }      /**< window should be treated as a popup menu */
    static WINDOW_VULKAN        { 0x10000000 }      /**< window usable for Vulkan surface */

    construct Create(title, x, y, w, h, flags) {}
    foreign Close()

}foreign class Stream { 
    construct Create(path) {}

    foreign Write(text) 
    foreign Close() 
    foreign Read()
}
class File {
    /**
     * The system-dependent path-separator character.
     * On UNIX systems the value of this
     * field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\\'</code>.
     *
     */
    static PathSeparator { "/" }
    /**
     * Returns the length of this abstract pathname's prefix.
     * For use by FileSystem classes.
     */
    PrefixLength { _prefixLength }

    
    /**
     * Returns the name of the file or directory denoted by this abstract
     * pathname.  This is just the last name in the pathname's name
     * sequence.  If the pathname's name sequence is empty, then the empty
     * string is returned.
     *
     */
    Name { _name }
    /**
     * Returns the pathname string of this abstract pathname's parent, or
     * <code>null</code> if this pathname does not name a parent directory.
     *
     */
    Parent { parent }
    /**
     * Converts this abstract pathname into a pathname string.  The resulting
     * string uses the {@link #separator default name-separator character} to
     * separate the names in the name sequence.
     *
     */
    Path { _path }
    /**
     * Tests whether the file or directory denoted by this abstract pathname
     * exists.
     *
     */
    construct Create(path) {
        _path = path
    }

    construct Create(parent, child) {
        _path = parent + "/" + child
    }


    Exists() {

    }
    /**
     * Tests whether the file denoted by this abstract pathname is a
     * directory.
     */
    IsDirectory() {

    }
    /**
     * Tests whether the file denoted by this abstract pathname is a normal
     * file.  A file is <em>normal</em> if it is not a directory and, in
     * addition, satisfies other system-dependent criteria.  Any non-directory
     * file created by a Java application is guaranteed to be a normal file.
     *
     */
    IsFile() {

    }
 }

